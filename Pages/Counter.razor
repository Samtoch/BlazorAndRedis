@page "/counter"
@using BlazorAndRedis.Data.Model;

@inject BlazorAndRedis.Repositories.IProductRepository repository
@inject Microsoft.Extensions.Caching.Distributed.IDistributedCache cache


<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<button class="btn btn-secondary" @onclick="GetProduct">Load Products</button>


@if (forecasts is null)
{
        <p><em>Loading...</em></p>
}
else if (forecasts is null && isLoaded)
{
        <p><em>Loading thousands of data fron db...</em></p>
}
else
{
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Id.</th>
                    <th>Name.</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                        <tr>
                            <td>@DateTime.Now</td>
                            <td>@forecast.Id</td>
                            <td>@forecast.Name</td>
                            <td>@forecast.Description</td>
                        </tr>
            }
            </tbody>
        </table>
}
@*else
{
        <p><em>Soemthing else is going on...</em></p>
}*@


@code {
    private List<Product> forecasts;
    private int currentCount = 0;
    private bool isLoaded = false;

    private async Task IncrementCount()
    {
        await repository.CreateProducts();
        currentCount++;
        forecasts = new List<Product>();
    }


    public async Task GetProduct()
    {
        isLoaded = true;
        forecasts = await repository.GetProducts();
    }

    public async Task GetProductFromCache()
    {
        forecasts = await repository.GetProducts();
    }
}
